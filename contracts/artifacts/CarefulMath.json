{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"g√∂rli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220d750bc2fbc30412a883c83fc336957afd6b3ad2ee29e91e73c1c472b3a036fd364736f6c63430006020033",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 POP 0xBC 0x2F 0xBC ADDRESS COINBASE 0x2A DUP9 EXTCODECOPY DUP4 0xFC CALLER PUSH10 0x57AFD6B3AD2EE29E91E7 EXTCODECOPY SHR SELFBALANCE 0x2B GASPRICE SUB PUSH16 0xD364736F6C6343000602003300000000 ",
			"sourceMap": "239:1949:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;239:1949:0;;;;;;;"
		},
		"deployedBytecode": {
			"linkReferences": {},
			"object": "6080604052600080fdfea2646970667358221220d750bc2fbc30412a883c83fc336957afd6b3ad2ee29e91e73c1c472b3a036fd364736f6c63430006020033",
			"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 POP 0xBC 0x2F 0xBC ADDRESS COINBASE 0x2A DUP9 EXTCODECOPY DUP4 0xFC CALLER PUSH10 0x57AFD6B3AD2EE29E91E7 EXTCODECOPY SHR SELFBALANCE 0x2B GASPRICE SUB PUSH16 0xD364736F6C6343000602003300000000 ",
			"sourceMap": "239:1949:0:-:0;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "12600",
				"executionCost": "66",
				"totalCost": "12666"
			},
			"internal": {
				"addThenSubUInt(uint256,uint256,uint256)": "infinite",
				"addUInt(uint256,uint256)": "infinite",
				"divUInt(uint256,uint256)": "infinite",
				"mulUInt(uint256,uint256)": "infinite",
				"subUInt(uint256,uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}